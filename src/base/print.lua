---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zkq.
--- DateTime: 2019/12/24 12:30 PM
---

local _M = {}
--- 当lua_code_cache off;时使用
--[[
print_dump是一个用于调试输出数据的函数，能够打印出nil,boolean,number,string,table类型的数据，以及table类型值的元表
参数data表示要输出的数据
参数showMetatable表示是否要输出元表
参数lastCount用于格式控制，用户请勿使用该变量
]]
local file = io.open("logs/debug.log", "a+")
function _M:print(data, showMetatable, lastCount)
    if type(data) ~= "table" then
        --Value
        if type(data) == "string" then
            file:write("\"", data, "\"")
        else
            file:write(tostring(data))
        end
    else
        --Format
        local count = lastCount or 0
        count = count + 1
        --io.write("{\n")
        file:write("=> "..tostring(data).." ".."{\n")
        --Metatable
        if showMetatable then
            for i = 1,count do file:write("\t") end
            local mt = getmetatable(data)
            file:write("\"__metatable\" = ")
            self:print(mt, showMetatable, count)    -- 如果不想看到元表的元表，可将showMetatable处填nil
            file:write(",\n")     --如果不想在元表后加逗号，可以删除这里的逗号
        end
        --Key
        for key,value in pairs(data) do
            for i = 1,count do file:write("\t") end
            if type(key) == "string" then
                file:write("\"", key, "\" = ")
            elseif type(key) == "number" then
                file:write("[", key, "] = ")
            else
                file:write(tostring(key))
            end
            self:print(value, showMetatable, count) -- 如果不想看到子table的元表，可将showMetatable处填nil
            file:write(",\n")     --如果不想在table的每一个item后加逗号，可以删除这里的逗号
        end
        --Format
        for i = 1,lastCount or 0 do file:write("\t") end
        file:write("}")
    end
    --Format
    if not lastCount then
        file:write("\n")
    end
    file:flush()
end

--local file = io.open("logs/debug.log", "a+")
--function _M:print(data, showMetatable, lastCount)
--    if type(data) ~= "table" then
--        --Value
--        if type(data) == "string" then
--            print("\"", data, "\"")
--        else
--            print(tostring(data))
--        end
--    else
--        --Format
--        local count = lastCount or 0
--        count = count + 1
--        --io.write("{\n")
--        print("=> "..tostring(data).." ".."{\n")
--        --Metatable
--        if showMetatable then
--            for i = 1,count do print("\t") end
--            local mt = getmetatable(data)
--            print("\"__metatable\" = ")
--            self:print(mt, showMetatable, count)    -- 如果不想看到元表的元表，可将showMetatable处填nil
--            print(",\n")     --如果不想在元表后加逗号，可以删除这里的逗号
--        end
--        --Key
--        for key,value in pairs(data) do
--            for i = 1,count do print("\t") end
--            if type(key) == "string" then
--                print("\"", key, "\" = ")
--            elseif type(key) == "number" then
--                print("[", key, "] = ")
--            else
--                print(tostring(key))
--            end
--            self:print(value, showMetatable, count) -- 如果不想看到子table的元表，可将showMetatable处填nil
--            print(",\n")     --如果不想在table的每一个item后加逗号，可以删除这里的逗号
--        end
--        --Format
--        for i = 1,lastCount or 0 do print("\t") end
--        print("}")
--    end
--    --Format
--    if not lastCount then
--        print("\n")
--    end
--end

--第二种方法

--function print_r ( t )
--    local print_r_cache={}
--    local function sub_print_r(t,indent)
--        if (print_r_cache[tostring(t)]) then
--            print(indent.."*"..tostring(t))
--        else
--            print_r_cache[tostring(t)]=true
--            if (type(t)=="table") then
--                for pos,val in pairs(t) do
--                    if (type(val)=="table") then
--                        print(indent.."["..pos.."] => "..tostring(t).." {")
--                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
--                        print(indent..string.rep(" ",string.len(pos)+6).."}")
--                    elseif (type(val)=="string") then
--                        print(indent.."["..pos..'] => "'..val..'"')
--                    else
--                        print(indent.."["..pos.."] => "..tostring(val))
--                    end
--                end
--            else
--                print(indent..tostring(t))
--            end
--        end
--    end
--    if (type(t)=="table") then
--        print(tostring(t).." {")
--        sub_print_r(t,"  ")
--        print("}")
--    else
--        sub_print_r(t,"  ")
--    end
--    print()
--end




--local myTable = {
--    firstName = "Fred",
--    lastName = "Bob",
--    phoneNumber = "(555) 555-1212",
--    age = 30,
--    favoriteSports = { "Baseball", "Hockey", "Soccer" },
--    favoriteTeams  = { "Cowboys", "Panthers", "Reds" }
--}



--myData = {
--    null = nil,
--    bool = true,
--    num = 20,
--    str = "abc",
--    subTab = {"111", "222"},
--    func = print,
--    sunTab = {"sun_a", {"sun_1", "sun_2"}, {you = "god", i = "man"}}
--}

--table.print = print
--table.print(myData)

return _M