---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zkq.
--- DateTime: 2019/12/31 4:35 PM
---

--应用注册
local function application_registry_run()
    if skywalking_config.get_application_id() ~= 0 then
        return
    end

    local application_info_json_obj = {skywalking_config.application_code}

    local http_instance = http:new()
    local resp, err = http_instance:request_uri(skywalking_config.collector_server_url, {
        method = "POST",
        path = skywalking_config.agent_application_registry_uri,
        headers = {
            ["Content-Type"] = "application/json;charset=utf-8"
        },
        body = cjson.encode(application_info_json_obj)
    })
    http_instance:close()

    if not resp then
        ngx.log(ngx.ERR, "注册skywalking application失败: ", err)
        return
    end

    local application_mapping = cjson.decode(resp.body)

    if application_mapping[1] ~= nil and application_mapping[1].i ~= 0 then
        skywalking_config.set_application_id(application_mapping[1].i)
        ngx.log(ngx.ALERT, "获取skywalking application注册信息: "..application_mapping[1].c..":"..application_mapping[1].i)
    else
        ngx.log(ngx.ALERT, "未获取skywalking application注册信息: "..application_mapping[1].c)
        return
    end
end



--实例注册
local function build_os_info()
    local ip_shell = [[/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:"]]

    local process = require "ngx.process"
    local process_id = process.get_master_pid()

    local f = io.popen("uname")
    local os_name = f:read("a")
    os_name = string.sub(os_name,1,#os_name - 1) -- 去掉末尾换行符
    f:close()

    f = io.popen("hostname")
    local hostname = f:read("a")
    f:close()

    f = io.popen(ip_shell)
    local ip = f:read("a")
    f:close()

    local os_info = {
        osName=os_name,
        hostName=hostname,
        processNo=process_id,
        ipv4s=functions.split(ip,"\n")
    }

    return os_info
end


local function instance_registry_run()
    if skywalking_config.get_application_id() == 0 or skywalking_config.get_instance_id() ~= 0 then
        return
    end

    ngx.update_time()
    local os_info = build_os_info()
    local instance_registry_json_obj = {
        ai = skywalking_config.get_application_id(),
        au = skywalking_config.agent_uuid,
        rt = ngx.now() * 1000,
        oi = os_info
    }

    local http_instance = http:new()
    local resp, err = http_instance:request_uri(skywalking_config.collector_server_url, {
        method = "POST",
        path = skywalking_config.agent_instance_registry_uri,
        headers = {
            ["Content-Type"] = "application/json;charset=utf-8"
        },
        body = cjson.encode(instance_registry_json_obj)
    })
    http_instance:close()

    if not resp then
        ngx.log(ngx.ERR, "注册skywalking instance失败: ", err)
        return
    end

    local application_instance_mapping = cjson.decode(resp.body)

    if application_instance_mapping ~= nil and application_instance_mapping.ii ~= 0 then
        skywalking_config.set_instance_id(application_instance_mapping.ii)
        ngx.log(ngx.ALERT, "获取skywalking instance注册信息: "..application_instance_mapping.ai..":"..application_instance_mapping.ii)
    else
        ngx.log(ngx.ALERT, "未获取skywalking instance注册信息: "..application_instance_mapping.ai)
        return
    end
end

-- heartbeat 心跳上报
local function heartbeat_run()
    if skywalking_config.get_application_id() == 0 or skywalking_config.get_instance_id() == 0 then
        return
    end

    ngx.update_time()

    local instance_json_obj = {
        ii = skywalking_config.get_instance_id(),
        ht = ngx.now() * 1000
    }
    local http_instance = http:new()
    local resp, err = http_instance:request_uri(skywalking_config.collector_server_url, {
        method = "POST",
        path = skywalking_config.instance_heartbeat_uri,
        headers = {
            ["Content-Type"] = "application/json;charset=utf-8"
        },
        body = cjson.encode(instance_json_obj)
    })
    http_instance:close()

    if not resp then
        ngx.log(ngx.ERR, "上报心跳数据失败[instance_id="..skywalking_config.get_instance_id().."]: ", err)
        return
    end

end


-- ngx.timer.every 方式创建轮询，需要openresty版本支持
--local function skywalking_timer_every()
--    -- application retistry 定时任务
--    local ok, err = ngx.timer.every(3, application_registry_run)
--    if not ok then
--        ngx.log(ngx.ERR, "failed to create the application registry timer: ", err)
--        return
--    end
--    -- instance retistry 定时任务
--    local ok,err = ngx.timer.every(3, instance_registry_run)
--    if not ok then
--        ngx.log(ngx.ERR, "failed to create the instance registry timer: ", err)
--        return
--    end
--    -- heartbeat 定时任务
--    local ok,err = ngx.timer.every(3, heartbeat_run)
--    if not ok then
--        ngx.log(ngx.ERR, "failed to create the heartbeat timer: ", err)
--        return
--    end
--end

-- ngx.timer.at 方式创建轮询
local delay = 3
local nxg_timer_at = ngx.timer.at
skywalking_timer_handler = function (premature)
    -- do some routine job in Lua just like a cron job
    if premature then
        return
    end

    application_registry_run()
    instance_registry_run()
    heartbeat_run()

    local ok, err = nxg_timer_at(delay, skywalking_timer_handler)
    if not ok then
        ngx.log(ngx.ERR, "failed to create the timer:skywalking_timer_handler ", err)
        return
    end
end

local function skywalking_timer_at()
    local ok, err = nxg_timer_at(delay, skywalking_timer_handler)
    if not ok then
        ngx.log(ngx.ERR, "failed to create the timer:skywalking_timer_handler first ", err)
        return
    end
end

local _M = {}
_M.skywalking_timer = skywalking_timer_at
return _M